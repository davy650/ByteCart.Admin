@inject NavigationManager _navigationManager
@inject IStringLocalizer<CultureSelector> _localizer

@rendermode InteractiveServer

<div class="culture-selector ms-auto">
    <label for="culture-select" class="visually-hidden">@_localizer["SelectLanguage"]</label>
    <select id="culture-select" class="form-select form-select-sm" @onchange="ChangeCulture">
        @foreach (var culture in Cultures)
        {
            <option value="@culture.Name" selected="@(currentCulture.Equals(culture.Name, StringComparison.OrdinalIgnoreCase))">
                @culture.DisplayName
            </option>
        }
    </select>
</div>

@code {
    [Inject]
    public IOptions<RequestLocalizationOptions> _localizationOptions { get; set; } = default!;

    private string currentCulture = CultureInfo.CurrentCulture.Name;
    private List<CultureInfo> Cultures => _localizationOptions.Value.SupportedUICultures!.ToList();

    protected override void OnInitialized()
    {
        currentCulture = CultureInfo.CurrentCulture.Name;
        // Check if the culture is specified in the url query string
        var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (queryParams.TryGetValue("culture", out var cultureFromQuery))
        {
            currentCulture = cultureFromQuery.ToString();
        }
    }

    private void ChangeCulture(ChangeEventArgs e)
    {
        var newCulture = e.Value?.ToString();
        if (newCulture != null)
        {
            var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri);
            var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

            query["culture"] = newCulture;

            var newUri = Microsoft.AspNetCore.WebUtilities.QueryHelpers.AddQueryString(uri.GetLeftPart(UriPartial.Path), query);

            _navigationManager.NavigateTo(newUri, forceLoad: true);
        }
    }
}