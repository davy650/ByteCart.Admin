@page "/products/create"

@inject IMediator _mediator
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime

@rendermode InteractiveServer

<h3>Create Product</h3>

<EditForm Model="@createProductCommand" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">

    <div class="row mb-3">
        <label for="name" class="col-sm-2 col-form-label">Name</label>
         <div class="col-sm-10">
        <InputText id="name" class="form-control" @bind-Value="createProductCommand.Name" />
        </div>
    </div>

    <div class="row mb-3">
        <label for="SKU" class="col-sm-2 col-form-label">SKU</label>
         <div class="col-sm-10">
        <InputText id="SKU" class="form-control" @bind-Value="createProductCommand.SKU" />
         </div>
    </div>

    <div class="row mb-3">
        <label for="description" class="col-sm-2 col-form-label">Description</label>
         <div class="col-sm-10">
        <InputTextArea id="description" class="form-control" @bind-Value="createProductCommand.Description" />
        </div>
    </div>

    <div class="row mb-3">
        <label for="price" class="col-sm-2 col-form-label">Price</label>
         <div class="col-sm-10">
        <InputNumber id="price" class="form-control" @bind-Value="createProductCommand.Price" />
        </div>
    </div>

    <div class="row mb-3">
        <label for="costPrice" class="col-sm-2 col-form-label">CostPrice</label>
         <div class="col-sm-10">
        <InputNumber id="costPrice" class="form-control" @bind-Value="createProductCommand.CostPrice" />
        </div>
    </div>

    <div class="row mb-3">
        <label for="stockQuantity" class="col-sm-2 col-form-label">StockQuantity</label>
         <div class="col-sm-10">
        <InputNumber id="stockQuantity" class="form-control" @bind-Value="createProductCommand.StockQuantity" />
        </div>
    </div>

      <div class="row mb-3">
        <label for="status" class="col-sm-2 col-form-label">Status:</label>
         <div class="col-sm-10">
        <InputSelect id="status" @bind-Value="createProductCommand.Status" class="form-control">
            @foreach (var status in Enum.GetValues(typeof(ProductStatus)))
            {
                <option value="@status">@status</option>
            }
        </InputSelect>
        </div>
    </div>

    <div class="row mb-3">
        <label for="supplier" class="col-sm-2 col-form-label">Supplier:</label>
         <div class="col-sm-10">
        <InputSelect @bind-Value="createProductCommand.SupplierId" id="supplier" class="form-control">
            <option value="">Select Supplier</option>
            @foreach (var supplier in Suppliers)
            {
                <option value="@supplier.Id">@supplier.Name</option>
            }
        </InputSelect>
        </div>
    </div>

    <div class="row mb-3">
        <label class="col-sm-2 col-form-label">Categories:</label>
         <div class="col-sm-10">
        @if (Categories.Any())
        {
            <div class="form-check">
                @foreach (var category in Categories)
                {
                    <input type="checkbox" id="category_@category.Id" @onchange="(e) => ToggleCategory(category.Id, e.Value is bool b && b)"
                        checked="@createProductCommand.Categories.Contains(category.Id)" />
                    <label for="category_@category.Id">@category.Name</label><br />
                }
            </div>
        }
        else
        {
            <p>Please add Categories to proceed</p>
        }
        </div>
    </div>

    <div class="row mb-3">
        <label class="col-sm-2 col-form-label">Tags:</label>
         <div class="col-sm-10">
        <input type="text" @bind-value="NewTagInput" placeholder="Add new tags (comma-separated)" @onkeydown="HandleTagInputKeyDown" class="form-control" />
        <div class="mt-2">
            @foreach (var tagId in createProductCommand.Tags)
            {
                var tagName = ExistingTags.FirstOrDefault(t => t.Id == tagId)?.Name;
                if (tagName != null)
                {
                    <span class="badge bg-info me-1">@tagName <button type="button" class="btn-close ms-1" @onclick="() => RemoveTag(tagId, isNew: false)"></button></span>
                }
            }
            @foreach (var newTagName in createProductCommand.NewTagNames)
            {
                <span class="badge bg-primary me-1">@newTagName <button type="button" class="btn-close ms-1" @onclick="() => RemoveTag(newTagName, isNew: true)"></button></span>
            }
        </div>
        
        <p class="text-muted"><small>Existing tags:</small>
        @foreach (var tag in ExistingTags.Where(t => !createProductCommand.Tags.Contains(t.Id)))
        {
            <button type="button" class="btn btn-sm btn-outline-secondary m-1" @onclick="() => AddExistingTag(tag.Id)">@tag.Name</button>
        }
        </p>
        </div>
    </div>

    <div class="row mb-3">
        <label for="launchDate" class="col-sm-2 col-form-label">Launch Date:</label>
         <div class="col-sm-10">
        <InputDate id="launchDate" @bind-Value="createProductCommand.LaunchDate" class="form-control" />
        </div>
    </div>

    <div class="row mb-3">
        <label for="endDate" class="col-sm-2 col-form-label">End Date:</label>
         <div class="col-sm-10">
        <InputDate id="endDate" @bind-Value="createProductCommand.EndDate" class="form-control" />
         </div>
    </div>

    <button type="submit" class="btn btn-primary mt-3">Add Product</button>
    <a href="/products" class="btn btn-secondary mt-3">Cancel</a>
</EditForm>

@code {
	private CreateProductCommand createProductCommand = new();
    private List<SupplierDto> Suppliers = new();
    private List<CategoryDto> Categories = new();
    private List<TagDto> ExistingTags = new(); 
    private string NewTagInput = string.Empty;

    protected override async Task OnInitializedAsync() 
    {
        await LoadSuppliers();
        await LoadCategories();
        await LoadExistingTags();
    }

    private async Task LoadExistingTags()
    {
        var tagsQuery = new GetTagListQueryCommand();
        ExistingTags = await _mediator.Send(tagsQuery);
    }

    private async Task LoadSuppliers()
    {
        var suppliersQuery = new GetSupplierListQueryCommand();
        Suppliers = await _mediator.Send(suppliersQuery);
    }

    private async Task LoadCategories()
    {
        var categoriesQuery = new GetCategoryListQueryCommand();
        Categories = await _mediator.Send(categoriesQuery);
    }

	private void HandleInvalidSubmit()
	{
        _jsRuntime.InvokeVoidAsync("alert", "Please correct the errors in the form.");
	}


    private void ToggleCategory(Guid categoryId, bool isChecked)
    {
        if (isChecked)
        {
            if (!createProductCommand.Categories.Contains(categoryId))
            {
                createProductCommand.Categories.Add(categoryId);
            }
        }
        else
        {
            createProductCommand.Categories.Remove(categoryId);
        }
    }

    private void HandleTagInputKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Key == "," && !string.IsNullOrWhiteSpace(NewTagInput))
        {
            var tags = NewTagInput.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
            foreach (var tag in tags)
            {
                if (string.IsNullOrWhiteSpace(tag)) continue;

                var existingTag = ExistingTags.FirstOrDefault(t => t.Name.Equals(tag, StringComparison.OrdinalIgnoreCase));
                if (existingTag != null)
                {
                    if (!createProductCommand.Tags.Contains(existingTag.Id))
                    {
                        createProductCommand.Tags.Add(existingTag.Id);
                    }
                }
                else 
                {
                    if (!createProductCommand.NewTagNames.Contains(tag, StringComparer.OrdinalIgnoreCase))
                    {
                        createProductCommand.NewTagNames.Add(tag);
                    }
                }
            }
            NewTagInput = string.Empty; 
        }
    }

    private void RemoveTag(object tagIdentifier, bool isNew)
    {
        if (isNew && tagIdentifier is string tagName)
        {
            createProductCommand.NewTagNames.Remove(tagName);
        }
        else if (!isNew && tagIdentifier is Guid tagId)
        {
            createProductCommand.Tags.Remove(tagId);
        }
    }

    private void AddExistingTag(Guid tagId)
    {
        if (!createProductCommand.Tags.Contains(tagId))
        {
            createProductCommand.Tags.Add(tagId);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var productId = await _mediator.Send(createProductCommand);
            _navigationManager.NavigateTo($"/products/details/{productId}"); 
        }
        catch (Exception ex)
        {
            await _jsRuntime.InvokeVoidAsync("alert", $"Error creating product: {ex.Message}");
        }
    }

}

