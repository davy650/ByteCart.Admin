@page "/products"
@using ByteCart.Admin.Application.Common
@using ByteCart.Admin.Application.DTOs
@inject IMediator Mediator
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer 

<h3>Product List</h3>

<div class="filter-section">
    <input type="text" @bind-value="searchTerm" placeholder="Search products..." class="form-control mb-3" />
    <select @bind="selectedCategoryId">
        <option value="">All Categories</option>
        @foreach (var category in Categories)
        {
            <option value="@category.Id">@category.Name</option>
        }
    </select>

    <select @bind="selectedSupplierId" class="form-select mb-3">
        <option value="">All Suppliers</option>
        @foreach (var supplier in Suppliers)
        {
            <option value="@supplier.Id">@supplier.Name</option>
        }   
    </select>

    <select @bind="selectedStatus">
        <option value="">All Statuses</option>
        @foreach (var status in Enum.GetValues(typeof(ProductStatus)))
        {
            <option value="@status">@status.ToString()</option>
        }
    </select>

    <select @bind="SortBy">
        <option value="Name">Name (asc)</option>
        <option value="PriceAsc">Price (asc)</option>
        <option value="PriceDesc">Price (desc)</option>
        <option value="DateCreatedAsc">DateCreated (asc)</option>
        <option value="DateCreatedDesc">DateCreated (desc)</option>
        <option value="StockAsc">Stock (asc)</option>
        <option value="StockDesc">Stock (desc)</option>
    </select>

    <button @onclick="ApplyFilters" class="btn btn-primary">Apply</button>
    <button @onclick="ClearFilters" class="btn btn-secondary">Clear</button>
</div>

@if (Products == null) 
{
    <p><em>Please wait ...</em></p>
}
else if (!Products.Any()) 
{
    <p><em>No Records found.</em></p>
}
else     
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Price</th>
                <th>SKU</th>
                <th>Supplier</th>
                <th>Status</th>
                <th>Stock</th>
                <th>Date Created</th>
                <th>Manage</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Price.ToString("C")</td>
                    <td>@product.SKU</td>
                    <td>@product.SupplierId</td>
                    <td>@product.Status.ToString()</td>
                    <td>@product.StockQuantity</td>
                    <td>@product.CreatedAt.ToShortDateString()</td>
                    <td>
                        <a href="/products/edit/@product.Id" class="btn btn-sm btn-primary">Edit</a>
                        <button @onclick="(() => DeleteProduct(product.Id))" class="btn btn-sm btn-danger">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <nav>
        <ul class="pagination">
            <li class="page-item @(HasPreviousPage ? "" : "disabled")">
                <button class="page-link" @onclick="() => ChangePage(CurrentPage - 1)">Previous</button>
            </li>
            @for (var i = 1; i <= TotalPages; i++)
            {
                <li class="page-item @(i == CurrentPage ? "active" : "")">
                    <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                </li>
            }
            <li class="page-item @(HasNextPage ? "" : "disabled")">
                <button class="page-link" @onclick="() => ChangePage(CurrentPage + 1)">Next</button>
            </li>
        </ul>
    </nav>
}

<a href="/products/create" class="btn btn-success">Add New Product</a>

@code {

    // TODO: implement logic to load categories
    // TODO: implement logic to load suppliers
    private List<CategoryDto> Categories = new();
    private List<SupplierDto> Suppliers = new();
    private PaginatedList<ProductDto>? PaginatedProductsList;
    private IEnumerable<ProductDto>? Products;

    private string searchTerm { get; set; } = string.Empty;
    private Guid? selectedCategoryId { get; set; }
    private Guid? selectedSupplierId { get; set; }
    private ProductStatus? selectedStatus { get; set; }

    private int PageSize = 10;
    private int TotalPages;
    private bool HasPreviousPage => PaginatedProductsList?.HasPreviousPage ?? false;
    private bool HasNextPage => PaginatedProductsList?.HasNextPage ?? false;
    private string SortBy = "Name";
    private int CurrentPage = 1;

    protected override async Task OnInitializedAsync()
    {
        // Load initial data
        await LoadProducts();
    }

    private async Task ApplyFilters()
    {
        CurrentPage = 1;
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        var query = new GetProductListQueryCommand
        {
            SearchTerm = searchTerm,
            PageNumber = CurrentPage,
            PageSize = PageSize,
            CategoryIds = selectedCategoryId.HasValue ? new List<Guid> { selectedCategoryId.Value } : null,
            SupplierId = selectedSupplierId,
            Status = selectedStatus,
            SortBy = SortBy
        };

        PaginatedProductsList = await Mediator.Send(query);
        TotalPages = PaginatedProductsList?.TotalPages ?? 0;
        Products = PaginatedProductsList?.Items ?? new List<ProductDto>();
    }
    
    private async Task ClearFilters()
    {
        searchTerm = string.Empty;
        selectedCategoryId = null;
        selectedSupplierId = null;
        selectedStatus = null;
        SortBy = "Name";
        CurrentPage = 1;

        await LoadProducts();
    }

    private async Task ChangePage(int pageNumber)
    {
        if (pageNumber < 1 || pageNumber > TotalPages) return;

        CurrentPage = pageNumber;
        await LoadProducts();
    }

    private async Task DeleteProduct(Guid productId)
    {
        bool confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this product?");  
        if (confirmDelete) 
        {
            // TODO: implement logic to delete product
        }
        await LoadProducts();
    }
}