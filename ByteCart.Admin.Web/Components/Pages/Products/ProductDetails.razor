@page "/products/details/{ProductId:guid}"
@inject IMediator _mediator
@inject NavigationManager _navigationManager

@rendermode InteractiveServer

<h3>Product Details</h3>

@if (Product == null)
{
    <p><em>Loading ...</em></p>
}
else
{
    <div class="card">
        <div class="card-header">
            <h4>@Product.Name <small class="text-muted">(@Product.SKU)</small></h4>
        </div>
        <div class="card-body">
            <dl class="row">
                <dt class="col-sm-3">Description</dt>
                <dd class="col-sm-9">@Product.Description</dd>

                <dt class="col-sm-3">Price</dt>
                <dd class="col-sm-9">@Product.Price.ToString("C")</dd>

                <dt class="col-sm-3">Cost Price</dt>
                <dd class="col-sm-9">@Product.CostPrice.ToString("C")</dd>

                <dt class="col-sm-3">Stock Quantity</dt>
                <dd class="col-sm-9">@Product.StockQuantity</dd>

                <dt class="col-sm-3">Status</dt>
                <dd class="col-sm-9">@Product.Status</dd>

                <dt class="col-sm-3">Supplier</dt>
                <dd class="col-sm-9">@Product.SupplierName</dd>

                <dt class="col-sm-3">Categories</dt>
                <dd class="col-sm-9">
                    @if (Product.CategoryNames.Any())
                    {
                        @string.Join(", ", Product.CategoryNames)
                    }
                    else
                    {
                        <em>No categories</em>
                    }
                </dd>

                <dt class="col-sm-3">Tags</dt>
                <dd class="col-sm-9">
                    @if (Product.TagNames.Any())
                    {
                        foreach (var tag in Product.TagNames)
                        {
                            <span class="badge bg-secondary">@tag</span>
                        }
                    }
                    else
                    {
                        <em>No tags</em>
                    }
                </dd>

                <dt class="col-sm-3">Launch Date</dt>
                <dd class="col-sm-9">@Product.LaunchDate.ToShortDateString()</dd>

                @if (Product.EndDate.HasValue)
                {
                    <dt class="col-sm-3">End Date</dt>
                    <dd class="col-sm-9">@Product.EndDate.Value.ToShortDateString()</dd>
                }
            </dl>
        </div>
        <div class="card-footer">
            <a href="/products/edit/@ProductId" class="btn btn-primary">Edit Product</a>
            <a href="/products" class="btn btn-secondary">Back to List</a>
        </div>
    </div>
}

@code {
    [Parameter]
    public Guid ProductId { get; set; }

    private ProductDto? Product;

    protected override async Task OnParametersSetAsync()
    {
        if (ProductId != Guid.Empty)
        {
            try
            {
                var query = new GetProductByIdQueryCommand { Id = ProductId };
                Product = await _mediator.Send(query);
            }
            catch (ApplicationException) 
            {
                _navigationManager.NavigateTo("/products", forceLoad: true); 
            }
            catch (Exception)
            {
                // Handle other unexpected errors
            }
        }
    }
}