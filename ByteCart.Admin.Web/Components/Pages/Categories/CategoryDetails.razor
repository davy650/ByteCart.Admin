@page "/categories/details/{CategoryId:guid}"

@inject IMediator Mediator
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<h3>Category Details</h3>

@if (Category == null)
{
    <p><em>Loading category details...</em></p>
}
else
{
    <div class="card">
        <div class="card-header">
            <h4>@Category.Name</h4>
        </div>
        <div class="card-body">
            <dl class="row">
                <dt class="col-sm-3">Description</dt>
                <dd class="col-sm-9">@(string.IsNullOrWhiteSpace(Category.Description) ? "N/A" : Category.Description)</dd>

                <dt class="col-sm-3">Parent Category</dt>
                <dd class="col-sm-9">
                    @if (Category.ParentCategoryId.HasValue)
                    {
                        <a href="/categories/details/@Category.ParentCategoryId">@Category.ParentCategoryId</a>
                    }
                    else
                    {
                        <span>Top-Level Category</span>
                    }
                </dd>

                <dt class="col-sm-3">Direct Products</dt>
                <dd class="col-sm-9">@Category.ProductCount</dd>

                <dt class="col-sm-3">Sub-Categories</dt>
                <dd class="col-sm-9">
                    @if (Category.SubCategories.Any())
                    {
                        <ul>
                            @foreach (var subCat in Category.SubCategories.OrderBy(sc => sc.Name))
                            {
                                <li><a href="/categories/details/@subCat.Id">@subCat.Name</a></li>
                            }
                        </ul>
                    }
                    else
                    {
                        <span>No direct sub-categories.</span>
                    }
                </dd>
            </dl>
        </div>
        <div class="card-footer">
            <a href="/categories/edit/@CategoryId" class="btn btn-primary me-2">Edit Category</a>
            <button @onclick="HandleDeleteCategory" class="btn btn-danger me-2">Delete Category</button>
            <a href="/categories" class="btn btn-secondary">Back to List</a>
        </div>
    </div>
}

@code {
    [Parameter]
    public Guid CategoryId { get; set; }

    private CategoryDto? Category;

    protected override async Task OnParametersSetAsync()
    {
        if (CategoryId != Guid.Empty)
        {
            try
            {
                var categoryQuery = new GetCategoryByIdQueryCommand { Id = CategoryId };
                Category = await Mediator.Send(categoryQuery);
            }
            catch (ApplicationException ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
                NavManager.NavigateTo("/categories", forceLoad: true); // Redirect if not found
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("alert", $"An unexpected error occurred: {ex.Message}");
            }
        }
    }

    private async Task HandleDeleteCategory()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this category? This action cannot be undone.");
        if (confirmed)
        {
            try
            {
                var deleteCommand = new DeleteCategoryCommand { CategoryId = CategoryId };
                await Mediator.Send(deleteCommand);
                await JSRuntime.InvokeVoidAsync("alert", "Category deleted successfully!");
                NavManager.NavigateTo("/categories"); // Redirect to list after deletion
            }
            catch (ApplicationException ex)
            {
                // Business rule violation (e.g., category has sub-categories or products)
                await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting category: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("alert", $"An unexpected error occurred during deletion: {ex.Message}");
            }
        }
    }
}