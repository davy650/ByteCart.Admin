@page "/categories"
@inject IMediator _medator
@inject IJSRuntime _JSRuntime
@inject IStringLocalizer<SharedResources> _localizer

@rendermode InteractiveServer

<h3>@_localizer["CategoryManagement"]</h3>

<p>@_localizer["CategoryManagementDescription"]</p>

@if (Categories == null)
{
    <p><em>@_localizer["LoadingData"]</em></p>
}
else if (!Categories.Any())
{
    <p>@_localizer["NoItemsFound", _localizer["Categories"].Value.ToLower(), _localizer["AddNewCategory"]]</p>
}
else
{
    <div class="category-tree">
        @foreach (var category in Categories.OrderBy(c => c.Name))
        {
            <CategoryTree Category="category" OnDelete="HandleDeleteCategory" />
        }
    </div>
}

<a href="/categories/create" class="btn btn-success mt-3">@_localizer["AddNewCategory"]</a>

@code {
    private IEnumerable<CategoryDto>? Categories;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        try
        {
            var categoryQuery = new GetCategoryListQueryCommand();
            Categories = await _medator.Send(categoryQuery);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await _JSRuntime.InvokeVoidAsync("alert", _localizer["ErrorMessage", ex.Message].Value);
        }
    }

    private async Task HandleDeleteCategory(Guid categoryId)
    {
        bool confirmed = await _JSRuntime.InvokeAsync<bool>("confirm", _localizer["ConfirmDelete"].Value);
        if (confirmed)
        {
            try
            {
                await _medator.Send(new DeleteCategoryCommand { CategoryId = categoryId }); 
                await _JSRuntime.InvokeVoidAsync("alert", _localizer["SuccessMessage", _localizer["Category"] + " " + _localizer["Delete"].Value].Value);
                await LoadCategories(); 
            }
            catch (ApplicationException ex)
            {
                await _JSRuntime.InvokeVoidAsync("alert", _localizer["ErrorMessage", ex.Message].Value);
            }
            catch (Exception ex)
            {
                await _JSRuntime.InvokeVoidAsync("alert", _localizer["ErrorMessage", ex.Message].Value);
            }
        }
    }
}