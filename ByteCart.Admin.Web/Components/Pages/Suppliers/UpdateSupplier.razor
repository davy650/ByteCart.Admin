@page "/suppliers/edit/{SupplierId:guid}"
@inject IMediator Mediator
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<h3>Edit Supplier</h3>

@if (updateSupplierCommand == null)
{
    <p><em>Loading ...</em></p>
}
else
{
    <EditForm Model="@updateSupplierCommand" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">

        <div class="form-group mb-3">
            <label for="name">Name:</label>
            <InputText id="name" @bind-Value="updateSupplierCommand.Name" class="form-control" />
        </div>
        <div class="form-group mb-3">
            <label for="contactEmail">Contact Email:</label>
            <InputText id="contactEmail" @bind-Value="updateSupplierCommand.ContactEmail" class="form-control" />
        </div>
        <div class="form-group mb-3">
            <label for="contactNumber">Contact Number:</label>
            <InputText id="contactNumber" @bind-Value="updateSupplierCommand.ContactNumber" class="form-control" />
        </div>
        <div class="form-group mb-3">
            <label for="address">Website:</label>
            <InputTextArea id="address" @bind-Value="updateSupplierCommand.Website" class="form-control" />
        </div>

        <button type="submit" class="btn btn-primary mt-3">Update Supplier</button>
        <a href="/suppliers" class="btn btn-secondary mt-3">Cancel</a>
    </EditForm>
}

@code {
    [Parameter]
    public Guid SupplierId { get; set; }

    private UpdateSupplierCommand updateSupplierCommand = new();

    protected override async Task OnParametersSetAsync()
    {
        if (SupplierId != Guid.Empty)
        {
            await LoadSupplierForEdit();
        }
    }

    private async Task LoadSupplierForEdit()
    {
        try
        {
            var supplerQueryCommand = new GetSupplierByIdQueryCommand { Id = SupplierId };
            var supplierData = await Mediator.Send(supplerQueryCommand);

            // Map the DTO to the command model for the form
            updateSupplierCommand = new UpdateSupplierCommand
            {
                Id = supplierData.Id,
                Name = supplierData.Name,
                ContactEmail = supplierData.ContactEmail,
                ContactNumber = supplierData.ContactNumber,
                Website = supplierData.Website
            };
        }
        catch (ApplicationException ex)
        {
            Console.WriteLine($"Error loading supplier for edit: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
            NavManager.NavigateTo("/suppliers"); // Redirect if supplier not found
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An unexpected error occurred while loading supplier: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"An unexpected error occurred: {ex.Message}");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await Mediator.Send(updateSupplierCommand);
            await JSRuntime.InvokeVoidAsync("alert", "Supplier updated successfully!");
            NavManager.NavigateTo($"/suppliers/details/{SupplierId}"); // Redirect to supplier details
        }
        catch (ApplicationException ex)
        {
            Console.WriteLine($"Business Rule Error: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating supplier: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating supplier: {ex.Message}");
        }
    }

    private void HandleInvalidSubmit()
    {
        Console.WriteLine("Invalid submission.");
    }
}